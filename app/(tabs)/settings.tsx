import React from "react";
import { View, Text, Button, StyleSheet, Alert, Switch } from "react-native";
import { Picker } from "@react-native-picker/picker";
import { useSettings } from "../../context/SettingsContext";

const colors = ["R칬d", "Bl친", "Gr칬n", "Gul", "Lila", "Rosa"];
const languages = ["Svenska", "Engelska", "Spanska", "Japanska"];
const volumeLevels = ["L친g", "Medel", "H칬g", "Max"];
const layouts = ["Enkel layout", "Avancerad layout", "Kompakt layout", "Maximal layout"];

const funnyMessages = [
  "Nej, det d칛r ville du inte v칛lja! 游땓",
  "Haha, trodde du verkligen att det skulle fungera? 游뱕",
  "칐verraskning! N친got annat valdes! 游꿀",
  "Det d칛r var inte r칛tt val f칬r dig... 游뱂",
  "Nej nej nej, s친 f친r du inte g칬ra! 游땐"
];

const colorMap: Record<string, string> = {
  R칬d: "#ff4c4c",
  Bl친: "#4c6eff",
  Gr칬n: "#4cff87",
  Gul: "#fff94c",
  Lila: "#c04cff",
  Rosa: "#ff4cb3",
};

const SettingsScreen = () => {
  const { settings, updateSettings, getRandomSetting } = useSettings();

  const getFunnyMessage = () => {
    return funnyMessages[Math.floor(Math.random() * funnyMessages.length)];
  };

  const handleChange = (type: "color" | "language" | "volume" | "layout", value: string) => {
    updateSettings({ [type]: value });
    Alert.alert("Hoppsan!", getFunnyMessage());
  };

  const handleSave = () => {
    Alert.alert("Oj d친!", "Dina inst칛llningar sparades... fast helt annorlunda! 游꿠");
  };

  const textColor = settings.darkMode ? "#fff" : "#000";
  const buttonColor = settings.darkMode ? "#999" : "#4CAF50";
  const bgColor = colorMap[settings.color] || "#ffffff";

  return (
    <View style={[styles.container, { backgroundColor: bgColor }]}>
      <Text style={[styles.header, { color: textColor }]}>F칬rvirrande Inst칛llningar 游꿠</Text>

      {/* F칛rg */}
      <View style={styles.setting}>
        <Text style={[styles.label, { color: textColor }]}>F칛rgtema:</Text>
        <Picker selectedValue={settings.color} onValueChange={(val) => handleChange("color", val)}>
          {colors.map((c, idx) => (
            <Picker.Item key={idx} label={c} value={c} />
          ))}
        </Picker>
      </View>

      {/* Spr친k */}
      <View style={styles.setting}>
        <Text style={[styles.label, { color: textColor }]}>Spr친k:</Text>
        <Picker selectedValue={settings.language} onValueChange={(val) => handleChange("language", val)}>
          {languages.map((lang, idx) => (
            <Picker.Item key={idx} label={lang} value={lang} />
          ))}
        </Picker>
      </View>

      {/* Volym */}
      <View style={styles.setting}>
        <Text style={[styles.label, { color: textColor }]}>Volym:</Text>
        <Picker selectedValue={settings.volume} onValueChange={(val) => handleChange("volume", val)}>
          {volumeLevels.map((vol, idx) => (
            <Picker.Item key={idx} label={vol} value={vol} />
          ))}
        </Picker>
      </View>

      {/* Layout */}
      <View style={styles.setting}>
        <Text style={[styles.label, { color: textColor }]}>Layout:</Text>
        <Picker selectedValue={settings.layout} onValueChange={(val) => handleChange("layout", val)}>
          {layouts.map((l, idx) => (
            <Picker.Item key={idx} label={l} value={l} />
          ))}
        </Picker>
      </View>

      {/* Dark Mode Toggle */}
      <View style={styles.setting}>
        <Text style={[styles.label, { color: textColor }]}>M칬rkt l칛ge:</Text>
        <Switch
          value={settings.darkMode}
          onValueChange={() => {
            updateSettings({ darkMode: !settings.darkMode });
            Alert.alert("游땙", getFunnyMessage());
          }}
        />
      </View>

      <View style={styles.buttonContainer}>
        <Button title="F칬rs칬k spara..." onPress={handleSave} color={buttonColor} />
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 20,
  },
  header: {
    fontSize: 24,
    fontWeight: "bold",
    marginBottom: 30,
  },
  setting: {
    marginBottom: 20,
  },
  label: {
    fontSize: 16,
    marginBottom: 5,
  },
  buttonContainer: {
    marginTop: 30,
  },
});

export default SettingsScreen;
